// ImageFlashWrite header file
// (c) Pier42 Electronics Design
//     https://www.tindie.com/stores/pier42/

// written by
// Wolfgang Friedrich
// Rev Start 2023/April/01
// Last change: 2023/April/01

#ifndef ImageFlashWrite_h
#define ImageFlashWrite_h

// Palette for VS23D040 standard display in BMP format
// B,   G,   R, 0
const byte ba_VS23S040_Palette[] = {
   0,   0,   0, 0,
  16,  16,  16, 0,
  32,  32,  32, 0,
  48,  48,  48, 0,
  64,  64,  64, 0,
  80,  80,  80, 0,
  96,  96,  96, 0,
 112, 112, 112, 0,
 143, 143, 143, 0,
 159, 159, 159, 0,
 175, 175, 175, 0,
 191, 191, 191, 0,
 207, 207, 207, 0,
 223, 223, 223, 0,
 239, 239, 239, 0,
 255, 255, 255, 0,
   0,  24,   0, 0,
  16,  40,   0, 0,
  32,  56,   0, 0,
  48,  72,   0, 0,
  64,  88,  16, 0,
  80, 104,  32, 0,
  96, 120,  48, 0,
 112, 136,  64, 0,
 143, 167,  95, 0,
 159, 183, 111, 0,
 175, 199, 127, 0,
 191, 215, 143, 0,
 207, 231, 159, 0,
 223, 247, 175, 0,
 239, 255, 191, 0,
 255, 255, 207, 0,
   0,   0,  96, 0,
  16,   0, 112, 0,
  32,   0, 128, 0,
  48,   0, 144, 0,
  64,  14, 160, 0,
  80,  30, 176, 0,
  96,  46, 192, 0,
 112,  62, 208, 0,
 143,  93, 239, 0,
 159, 109, 255, 0,
 175, 125, 255, 0,
 191, 141, 255, 0,
 207, 157, 255, 0,
 223, 173, 255, 0,
 239, 189, 255, 0,
 255, 205, 255, 0,
   0,   0,  47, 0,
  16,   0,  63, 0,
  32,   7,  79, 0,
  48,  23,  95, 0,
  64,  39, 111, 0,
  80,  55, 127, 0,
  96,  71, 143, 0,
 112,  87, 159, 0,
 143, 118, 190, 0,
 159, 134, 206, 0,
 175, 150, 222, 0,
 191, 166, 238, 0,
 207, 182, 254, 0,
 223, 198, 255, 0,
 239, 214, 255, 0,
 255, 230, 255, 0,
  85,   0,   0, 0,
 101,   0,  16, 0,
 117,  15,  32, 0,
 133,  31,  48, 0,
 149,  47,  64, 0,
 165,  63,  80, 0,
 181,  79,  96, 0,
 197,  95, 112, 0,
 228, 126, 143, 0,
 244, 142, 159, 0,
 255, 158, 175, 0,
 255, 174, 191, 0,
 255, 190, 207, 0,
 255, 206, 223, 0,
 255, 222, 239, 0,
 255, 238, 255, 0,
  85,   7,   0, 0,
 101,  23,   0, 0,
 117,  39,   0, 0,
 133,  55,   1, 0,
 149,  71,  17, 0,
 165,  87,  33, 0,
 181, 103,  49, 0,
 197, 119,  65, 0,
 228, 150,  96, 0,
 244, 166, 112, 0,
 255, 182, 128, 0,
 255, 198, 144, 0,
 255, 214, 160, 0,
 255, 230, 176, 0,
 255, 246, 192, 0,
 255, 255, 208, 0,
  83,   0,  96, 0,
  99,   0, 112, 0,
 115,   0, 128, 0,
 131,   0, 144, 0,
 147,   0, 160, 0,
 163,  14, 176, 0,
 179,  30, 192, 0,
 195,  46, 208, 0,
 226,  77, 239, 0,
 242,  93, 255, 0,
 255, 109, 255, 0,
 255, 125, 255, 0,
 255, 141, 255, 0,
 255, 157, 255, 0,
 255, 173, 255, 0,
 255, 189, 255, 0,
  83,   0,  47, 0,
  99,   0,  63, 0,
 115,   0,  79, 0,
 131,   7,  95, 0,
 147,  23, 111, 0,
 163,  39, 127, 0,
 179,  55, 143, 0,
 195,  71, 159, 0,
 226, 102, 190, 0,
 242, 118, 206, 0,
 255, 134, 222, 0,
 255, 150, 238, 0,
 255, 166, 254, 0,
 255, 182, 255, 0,
 255, 198, 255, 0,
 255, 214, 255, 0,
   0,  33,   0, 0,
   0,  49,  16, 0,
   0,  65,  32, 0,
   0,  81,  48, 0,
   0,  97,  64, 0,
   0, 113,  80, 0,
   0, 129,  96, 0,
   0, 145, 112, 0,
   0, 176, 143, 0,
   0, 192, 159, 0,
   2, 208, 175, 0,
  18, 224, 191, 0,
  34, 240, 207, 0,
  50, 255, 223, 0,
  66, 255, 239, 0,
  82, 255, 255, 0,
   0,  57,   0, 0,
   0,  73,   0, 0,
   0,  89,   0, 0,
   0, 105,   0, 0,
   0, 121,  16, 0,
   0, 137,  32, 0,
   0, 153,  48, 0,
   0, 169,  64, 0,
   0, 200,  95, 0,
   0, 216, 111, 0,
   4, 232, 127, 0,
  20, 248, 143, 0,
  36, 255, 159, 0,
  52, 255, 175, 0,
  68, 255, 191, 0,
  84, 255, 207, 0,
   0,   0,  95, 0,
   0,   0, 111, 0,
   0,  16, 127, 0,
   0,  32, 143, 0,
   0,  48, 159, 0,
   0,  64, 175, 0,
   0,  80, 191, 0,
   0,  96, 207, 0,
   0, 127, 238, 0,
   0, 143, 254, 0,
   2, 159, 255, 0,
  18, 175, 255, 0,
  34, 191, 255, 0,
  50, 207, 255, 0,
  66, 223, 255, 0,
  82, 239, 255, 0,
   0,   9,  46, 0,
   0,  25,  62, 0,
   0,  41,  78, 0,
   0,  57,  94, 0,
   0,  73, 110, 0,
   0,  89, 126, 0,
   0, 105, 142, 0,
   0, 121, 158, 0,
   0, 152, 189, 0,
   0, 168, 205, 0,
   2, 184, 221, 0,
  18, 200, 237, 0,
  34, 216, 253, 0,
  50, 232, 255, 0,
  66, 248, 255, 0,
  82, 255, 255, 0,
   0,  16,   0, 0,
   0,  32,  16, 0,
   0,  48,  32, 0,
   0,  64,  48, 0,
   0,  80,  64, 0,
   0,  96,  80, 0,
  10, 112,  96, 0,
  26, 128, 112, 0,
  57, 159, 143, 0,
  73, 175, 159, 0,
  89, 191, 175, 0,
 105, 207, 191, 0,
 121, 223, 207, 0,
 137, 239, 223, 0,
 153, 255, 239, 0,
 169, 255, 255, 0,
   0,  40,   0, 0,
   0,  56,   0, 0,
   0,  72,   0, 0,
   0,  88,   0, 0,
   0, 104,  16, 0,
   0, 120,  32, 0,
  12, 136,  48, 0,
  28, 152,  64, 0,
  59, 183,  95, 0,
  75, 199, 111, 0,
  91, 215, 127, 0,
 107, 231, 143, 0,
 123, 247, 159, 0,
 139, 255, 175, 0,
 155, 255, 191, 0,
 171, 255, 207, 0,
   0,   0,  95, 0,
   0,   0, 111, 0,
   0,   0, 127, 0,
   0,  15, 143, 0,
   0,  31, 159, 0,
   0,  47, 175, 0,
  10,  63, 191, 0,
  26,  79, 207, 0,
  57, 110, 238, 0,
  73, 126, 254, 0,
  89, 142, 255, 0,
 105, 158, 255, 0,
 121, 174, 255, 0,
 137, 190, 255, 0,
 153, 206, 255, 0,
 169, 222, 255, 0,
   0,   0,  46, 0,
   0,   8,  62, 0,
   0,  24,  78, 0,
   0,  40,  94, 0,
   0,  56, 110, 0,
   0,  72, 126, 0,
  10,  88, 142, 0,
  26, 104, 158, 0,
  57, 135, 189, 0,
  73, 151, 205, 0,
  89, 167, 221, 0,
 105, 183, 237, 0,
 121, 199, 253, 0,
 137, 215, 255, 0,
 153, 231, 255, 0,
 169, 247, 255, 0 };

void f_SPImemdump (unsigned long address, unsigned int bytes);
void f_DownloadImage ( unsigned long memory_location );
void f_DownloadConvertImage ( unsigned long memory_location );
void SPImemSectorErase ( unsigned long mem_addr );

#endif
